name: Build on Windows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Install dependencies including Cairo
      run: |
        choco install -y 7zip
        choco install -y pkgconfiglite
        choco install -y msys2 || echo "Ignoring MSYS2 refreshenv warning"
        # Install GTK3 which includes Cairo libraries
        choco install -y gtk-runtime

    - name: Add paths to environment
      shell: pwsh
      run: |
        echo "C:\tools\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Download Cairo DLLs
      shell: pwsh
      run: |
        # Create a folder for Cairo DLLs
        New-Item -ItemType Directory -Force -Path "cairo_dlls"
        
        # Download Cairo DLLs from a reliable source
        $cairoDlls = @(
            "https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2022-01-04/gtk3-runtime-3.24.31-2022-01-04-ts-win64.exe"
        )
        
        # Alternative: Use conda-forge Cairo
        conda install -c conda-forge cairo || echo "Conda install failed, trying alternative"
        
        # Copy system Cairo DLLs if available
        if (Test-Path "C:\tools\gtk\bin\libcairo-2.dll") {
            Copy-Item "C:\tools\gtk\bin\libcairo*.dll" -Destination "cairo_dlls\" -Force
        }

    - name: Build EXE with PyInstaller (with Cairo support)
      run: |
        pyinstaller --onefile ^
          --add-data "amazon_cookies.pkl;." ^
          --add-data "amazon_session_info.json;." ^
          --add-binary "cairo_dlls\*.dll;." ^
          --hidden-import cairocffi ^
          --hidden-import cairosvg ^
          --collect-all cairocffi ^
          --collect-all cairosvg ^
          Amazon_seller_selenium.py

    - name: List EXE output
      run: dir dist

    - name: Upload EXE as artifact
      uses: actions/upload-artifact@v4
      with:
        name: amazon-seller-exe
        path: dist/*.exe
