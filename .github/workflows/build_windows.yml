name: Build Windows Executable with Cairo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      shell: powershell
      run: |
        choco install -y 7zip
        choco install -y pkgconfiglite
        choco install -y msys2 --params="/NoUpdate"
        refreshenv

    - name: Download and extract Cairo
      shell: powershell
      run: |
        $url = "https://cairographics.org/snapshots/cairo-1.17.2.tar.xz"
        Invoke-WebRequest -Uri $url -OutFile cairo.tar.xz
        7z x cairo.tar.xz
        7z x cairo.tar
        # Rename directory for easier access
        Rename-Item -Path "cairo-1.17.2" -NewName "cairo"
        # Check if we got the files
        if (-not (Test-Path "cairo\src\cairo.h")) {
          throw "Cairo extraction failed - essential files missing"
        }

    - name: Install pre-built Cairo binaries (alternative)
      shell: powershell
      run: |
        # Download pre-built binaries (much easier than compiling)
        $url = "https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2022-01-04/gtk3-runtime-3.24.31-2022-01-04-ts-win64.exe"
        Invoke-WebRequest -Uri $url -OutFile gtk3-runtime.exe
        Start-Process -Wait -FilePath .\gtk3-runtime.exe -ArgumentList "/S","/D=C:\gtk3"
        echo "C:\gtk3\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Create and activate venv
      run: |
        python -m venv venv
        venv\Scripts\activate

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller
      shell: powershell
      run: |
        venv\Scripts\activate
        pyinstaller --onefile --name AmazonOrderProcessor `
          --collect-all selenium `
          --collect-all webdriver_manager `
          --collect-all cairosvg `
          --collect-all lxml `
          --collect-all PIL `
          --add-binary "C:\gtk3\bin\libcairo-2.dll;." `
          --add-binary "C:\gtk3\bin\libpng16-16.dll;." `
          --add-binary "C:\gtk3\bin\zlib1.dll;." `
          --add-data "amazon_cookies.pkl;." `
          --add-data "amazon_session_info.json;." `
          Amazon_seller_selenium.py

    - name: Verify executable
      shell: powershell
      run: |
        if (-not (Test-Path "dist\AmazonOrderProcessor.exe")) {
          throw "Executable not found!"
        }
        $size = (Get-Item "dist\AmazonOrderProcessor.exe").Length/1MB
        echo "Executable size: $size MB"
        if ($size -lt 5) {
          throw "Executable too small - likely missing dependencies"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AmazonOrderProcessor
        path: dist/AmazonOrderProcessor.exe
