name: Build Windows Executable with Cairo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      
    - name: Install Chocolatey dependencies
      shell: powershell
      run: |
        if (Test-Path "$env:ProgramData\chocolatey\bin\choco.exe") {
          choco upgrade chocolatey -y
        } else {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        
    - name: Install Cairo and dependencies
      shell: powershell
      run: |
        choco install cairo --version=1.16.0 -y
        choco install pkgconfiglite -y
        # Verify the DLLs exist
        if (-not (Test-Path "C:\tools\cairo\bin\libcairo-2.dll")) {
          throw "Cairo installation failed - DLLs not found"
        }

    - name: Create and activate venv
      run: |
        python -m venv venv
        venv\Scripts\activate
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller
      shell: powershell
      run: |
        venv\Scripts\activate
        
        # Create a spec file to have more control over the build
        pyi-makespec --onefile --name AmazonOrderProcessor `
          --collect-all selenium `
          --collect-all webdriver_manager `
          --collect-all cairosvg `
          --collect-all lxml `
          --collect-all PIL `
          --add-data "amazon_cookies.pkl;." `
          --add-data "amazon_session_info.json;." `
          Amazon_seller_selenium.py
        
        # Modify the spec file to include DLLs
        (Get-Content AmazonOrderProcessor.spec) -replace 
          '^a = Analysis\(', 
          ('a = Analysis([''Amazon_seller_selenium.py''],' +
           'pathex=[''C:\\tools\\cairo\\bin''],' +
           'binaries=[(''C:\\tools\\cairo\\bin\\libcairo-2.dll'', ''.''),' +
                     '(''C:\\tools\\cairo\\bin\\libpng16-16.dll'', ''.''),' +
                     '(''C:\\tools\\cairo\\bin\\zlib1.dll'', ''.'')],') | 
          Set-Content AmazonOrderProcessor.spec
        
        # Build using the modified spec file
        pyinstaller AmazonOrderProcessor.spec

    - name: Verify executable contains DLLs
      shell: powershell
      run: |
        if (-not (Test-Path "dist\AmazonOrderProcessor.exe")) {
          throw "Executable not found!"
        }
        # Simple check that the file is not empty
        if ((Get-Item "dist\AmazonOrderProcessor.exe").Length -lt 1MB) {
          throw "Executable seems too small - likely missing dependencies"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AmazonOrderProcessor
        path: dist/AmazonOrderProcessor.exe
