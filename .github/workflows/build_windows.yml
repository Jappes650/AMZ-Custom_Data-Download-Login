def create_driver():
    """Create and configure a Chrome WebDriver with automatic ChromeDriver management"""
    # Configure cache directory - ALWAYS use the user's home folder
    home_dir = os.path.expanduser('~')
    cache_dir = os.path.join(home_dir, '.wdm')
    
    # Ensure the directory exists (create all parent folders if needed)
    try:
        os.makedirs(cache_dir, exist_ok=True)
    except Exception as e:
        print(f"Error creating cache directory: {e}")
        # Fallback to temp directory if home directory fails
        import tempfile
        cache_dir = tempfile.mkdtemp()
        print(f"Using temporary directory: {cache_dir}")

    # DEBUG: Print paths for verification (remove in production)
    print(f"Home directory: {home_dir}")
    print(f"Using cache directory: {cache_dir}")
    print(f"Directory exists: {os.path.exists(cache_dir)}")

    # Configure webdriver-manager environment
    os.environ['WDM_LOCAL'] = '1'
    os.environ['WDM_PRINT_FIRST_LINE'] = 'False'
    os.environ['WDM_LOG_LEVEL'] = '0'
    os.environ['WDM_CACHE_DIR'] = cache_dir  # Critical override

    # Install ChromeDriver with multiple fallback strategies
    max_retries = 2
    driver_path = None
    
    for attempt in range(max_retries):
        try:
            # Try standard installation first
            driver_path = ChromeDriverManager(path=cache_dir).install()
            break
        except Exception as e:
            print(f"Attempt {attempt + 1} failed: {e}")
            if attempt == max_retries - 1:
                raise  # Re-raise last error
            # Clean cache and retry
            import shutil
            shutil.rmtree(cache_dir, ignore_errors=True)
            os.makedirs(cache_dir, exist_ok=True)

    # Configure Chrome options
    chrome_options = Options()
    chrome_options.add_experimental_option("prefs", {
        "profile.default_content_setting_values.notifications": 2,
        "download.default_directory": DOWNLOAD_DIR,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument(f"--user-agent={USER_AGENT}")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # Create driver instance
    service = Service(driver_path)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    return driver
