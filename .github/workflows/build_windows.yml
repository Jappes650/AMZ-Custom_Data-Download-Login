name: Build on Windows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Install dependencies including Cairo
      run: |
        choco install -y 7zip
        choco install -y pkgconfiglite
        choco install -y msys2 || echo "Ignoring MSYS2 refreshenv warning"
        # Install GTK3 which includes Cairo libraries
        choco install -y gtk-runtime

    - name: Add paths to environment
      shell: pwsh
      run: |
        echo "C:\tools\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\tools\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Python dependencies
      run: pip install -r requirements.txt

    - name: Download and setup Cairo DLLs
      shell: pwsh
      run: |
        # Create a folder for Cairo DLLs
        New-Item -ItemType Directory -Force -Path "cairo_dlls"
        
        # Download Cairo DLLs directly from a reliable source
        $cairoUrl = "https://github.com/preshing/cairo-windows/releases/download/1.17.2/cairo-windows-1.17.2.zip"
        Invoke-WebRequest -Uri $cairoUrl -OutFile "cairo-windows.zip"
        
        # Extract Cairo DLLs
        Expand-Archive -Path "cairo-windows.zip" -DestinationPath "cairo_extract"
        
        # Copy necessary DLLs
        if (Test-Path "cairo_extract\cairo-windows-1.17.2\lib\x64") {
            Copy-Item "cairo_extract\cairo-windows-1.17.2\lib\x64\*.dll" -Destination "cairo_dlls\" -Force
        }
        
        # Also try to copy from GTK installation if available
        if (Test-Path "C:\tools\gtk\bin\libcairo-2.dll") {
            Copy-Item "C:\tools\gtk\bin\libcairo*.dll" -Destination "cairo_dlls\" -Force
        }
        
        # List what we have
        Write-Host "Cairo DLLs found:"
        Get-ChildItem -Path "cairo_dlls" -ErrorAction SilentlyContinue

    - name: Build EXE with PyInstaller (with Cairo support)
      shell: pwsh
      run: |
        # Check if Cairo DLLs exist
        $cairoDlls = Get-ChildItem -Path "cairo_dlls\*.dll" -ErrorAction SilentlyContinue
        
        if ($cairoDlls) {
            Write-Host "Building with Cairo DLLs..."
            pyinstaller --onefile `
              --add-data "amazon_cookies.pkl;." `
              --add-data "amazon_session_info.json;." `
              --add-binary "cairo_dlls\*.dll;." `
              --hidden-import cairocffi `
              --hidden-import cairosvg `
              --collect-all cairocffi `
              --collect-all cairosvg `
              Amazon_seller_selenium.py
        } else {
            Write-Host "No Cairo DLLs found, building without Cairo binaries..."
            pyinstaller --onefile `
              --add-data "amazon_cookies.pkl;." `
              --add-data "amazon_session_info.json;." `
              --hidden-import cairocffi `
              --hidden-import cairosvg `
              --collect-all cairocffi `
              --collect-all cairosvg `
              Amazon_seller_selenium.py
        }

    - name: List EXE output
      run: dir dist

    - name: Upload EXE as artifact
      uses: actions/upload-artifact@v4
      with:
        name: amazon-seller-exe
        path: dist/*.exe
